// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using framework_backend.Data;

#nullable disable

namespace framework_backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250921052146_fixedProjectModel")]
    partial class fixedProjectModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("framework_backend.Models.ArchitectModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Trending")
                        .HasColumnType("boolean");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Architects");
                });

            modelBuilder.Entity("framework_backend.Models.ProjectContributors", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("ArchitectId")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProjectId", "ArchitectId");

                    b.HasIndex("ArchitectId");

                    b.ToTable("ProjectContributors");
                });

            modelBuilder.Entity("framework_backend.Models.ProjectModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ESG")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Featured")
                        .HasColumnType("boolean");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Ongoing")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("framework_backend.Models.ArchitectModel", b =>
                {
                    b.OwnsOne("framework_backend.Models.ArchitectSocialMedia", "SocialMedia", b1 =>
                        {
                            b1.Property<int>("ArchitectModelId")
                                .HasColumnType("integer");

                            b1.Property<string>("Instagram")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Linkedin")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Portfolio")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ArchitectModelId");

                            b1.ToTable("Architects");

                            b1.WithOwner()
                                .HasForeignKey("ArchitectModelId");
                        });

                    b.OwnsOne("framework_backend.Models.ArchitectStats", "Stats", b1 =>
                        {
                            b1.Property<int>("ArchitectModelId")
                                .HasColumnType("integer");

                            b1.Property<int>("ESGProjects")
                                .HasColumnType("integer");

                            b1.Property<int>("Followers")
                                .HasColumnType("integer");

                            b1.Property<int>("Likes")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalProjects")
                                .HasColumnType("integer");

                            b1.Property<int>("Views")
                                .HasColumnType("integer");

                            b1.HasKey("ArchitectModelId");

                            b1.ToTable("Architects");

                            b1.WithOwner()
                                .HasForeignKey("ArchitectModelId");
                        });

                    b.OwnsOne("framework_backend.Models.ArchitectTraining", "Training", b1 =>
                        {
                            b1.Property<int>("ArchitectModelId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Year")
                                .HasColumnType("integer");

                            b1.HasKey("ArchitectModelId");

                            b1.ToTable("Architects");

                            b1.WithOwner()
                                .HasForeignKey("ArchitectModelId");
                        });

                    b.OwnsOne("framework_backend.Models.Location", "Location", b1 =>
                        {
                            b1.Property<int>("ArchitectModelId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ArchitectModelId");

                            b1.ToTable("Architects");

                            b1.WithOwner()
                                .HasForeignKey("ArchitectModelId");
                        });

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("SocialMedia")
                        .IsRequired();

                    b.Navigation("Stats")
                        .IsRequired();

                    b.Navigation("Training")
                        .IsRequired();
                });

            modelBuilder.Entity("framework_backend.Models.ProjectContributors", b =>
                {
                    b.HasOne("framework_backend.Models.ArchitectModel", "Architect")
                        .WithMany()
                        .HasForeignKey("ArchitectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("framework_backend.Models.ProjectModel", "ProjectModel")
                        .WithMany("Contributors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Architect");

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("framework_backend.Models.ProjectModel", b =>
                {
                    b.OwnsOne("framework_backend.DTOs.LocationDTO", "Location", b1 =>
                        {
                            b1.Property<int>("ProjectModelId")
                                .HasColumnType("integer");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ProjectModelId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectModelId");

                            b1.OwnsOne("framework_backend.Models.Coordinates", "Coordinates", b2 =>
                                {
                                    b2.Property<int>("LocationDTOProjectModelId")
                                        .HasColumnType("integer");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("double precision");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("double precision");

                                    b2.HasKey("LocationDTOProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("LocationDTOProjectModelId");
                                });

                            b1.Navigation("Coordinates")
                                .IsRequired();
                        });

                    b.OwnsOne("framework_backend.Models.ProjectStats", "Stats", b1 =>
                        {
                            b1.Property<int>("ProjectModelId")
                                .HasColumnType("integer");

                            b1.Property<int>("Likes")
                                .HasColumnType("integer");

                            b1.Property<int>("Views")
                                .HasColumnType("integer");

                            b1.HasKey("ProjectModelId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectModelId");
                        });

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Stats")
                        .IsRequired();
                });

            modelBuilder.Entity("framework_backend.Models.ProjectModel", b =>
                {
                    b.Navigation("Contributors");
                });
#pragma warning restore 612, 618
        }
    }
}
