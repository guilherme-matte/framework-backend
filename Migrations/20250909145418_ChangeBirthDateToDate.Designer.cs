// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using framework_backend.Data;

#nullable disable

namespace framework_backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250909145418_ChangeBirthDateToDate")]
    partial class ChangeBirthDateToDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("framework_backend.Models.Architect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Trending")
                        .HasColumnType("boolean");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Architects");
                });

            modelBuilder.Entity("framework_backend.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArchitectId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArchitectId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("framework_backend.Models.Architect", b =>
                {
                    b.OwnsOne("framework_backend.Models.Location", "Location", b1 =>
                        {
                            b1.Property<int>("ArchitectId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ArchitectId");

                            b1.ToTable("Architects");

                            b1.WithOwner()
                                .HasForeignKey("ArchitectId");
                        });

                    b.OwnsOne("framework_backend.Models.SocialMedia", "SocialMedia", b1 =>
                        {
                            b1.Property<int>("ArchitectId")
                                .HasColumnType("integer");

                            b1.Property<string>("Instagram")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Linkedin")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Portfolio")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ArchitectId");

                            b1.ToTable("Architects");

                            b1.WithOwner()
                                .HasForeignKey("ArchitectId");
                        });

                    b.OwnsOne("framework_backend.Models.Stats", "Stats", b1 =>
                        {
                            b1.Property<int>("ArchitectId")
                                .HasColumnType("integer");

                            b1.Property<int>("ESGProjects")
                                .HasColumnType("integer");

                            b1.Property<int>("Followers")
                                .HasColumnType("integer");

                            b1.Property<int>("Likes")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalProjects")
                                .HasColumnType("integer");

                            b1.Property<int>("Views")
                                .HasColumnType("integer");

                            b1.HasKey("ArchitectId");

                            b1.ToTable("Architects");

                            b1.WithOwner()
                                .HasForeignKey("ArchitectId");
                        });

                    b.OwnsOne("framework_backend.Models.Training", "Training", b1 =>
                        {
                            b1.Property<int>("ArchitectId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Year")
                                .HasColumnType("integer");

                            b1.HasKey("ArchitectId");

                            b1.ToTable("Architects");

                            b1.WithOwner()
                                .HasForeignKey("ArchitectId");
                        });

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("SocialMedia")
                        .IsRequired();

                    b.Navigation("Stats")
                        .IsRequired();

                    b.Navigation("Training")
                        .IsRequired();
                });

            modelBuilder.Entity("framework_backend.Models.Speciality", b =>
                {
                    b.HasOne("framework_backend.Models.Architect", "Architect")
                        .WithMany("Speciality")
                        .HasForeignKey("ArchitectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Architect");
                });

            modelBuilder.Entity("framework_backend.Models.Architect", b =>
                {
                    b.Navigation("Speciality");
                });
#pragma warning restore 612, 618
        }
    }
}
